apply plugin: 'com.android.application'

//import  com.android.build.gradle.internal.tasks.SigningReportTask
//import com.android.build.gradle.internal.dsl.SigningConfig
import com.android.ide.common.signing.CertificateInfo
import com.android.ide.common.signing.KeystoreHelper
import java.security.MessageDigest
import java.security.NoSuchAlgorithmException
import java.security.cert.Certificate
import java.security.cert.CertificateEncodingException

ext {
    MY_APP_SHA_TYPE = ""
    MY_APP_SHA_VALUE = ""
    MY_APP_SHA_VALUES = new HashMap<String,String>()
    FLAVORS = ['bibigo', 'global']
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"
    lintOptions {
        checkReleaseBuilds false
        //If you want to continue even if errors found use following line
        abortOnError false
    }
    defaultConfig {
        applicationId "com.chenenyu.security"
        minSdkVersion 14
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    signingConfigs {
        debug {
            storeFile file("../keystore.jks")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }

        gradleStudy {
            storeFile file("../cer/gradleStudy")
            storePassword "xiaopenyou"
            keyAlias "xiaopenyou"
            keyPassword "xiaopenyou"
            v1SigningEnabled true
            v2SigningEnabled true
        }

        xiaopenyou {
            storeFile file("../cer/xiaopenyou.jks")
            storePassword "xiaopenyou"
            keyAlias "xiaopenyou"
            keyPassword "xiaopenyou"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        debug {
            matchingFallbacks = ['release', 'debug']
        }
        release {
            signingConfig null
            matchingFallbacks = ['release', 'debug']
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        def flavor_with_buildtype_Name = variant.name
//        def buildTypename = variant.buildType.name.toString()
//        println "Show  Flavor is " + flavor_with_buildtype_Name + " with buildTypename : " + buildTypename
        def signingconfig = variant.signingConfig
        if (signingconfig !=null){
            CertificateInfo certificateInfo = KeystoreHelper.getCertificateInfo(
                    signingconfig.getStoreType(),
                    signingconfig.getStoreFile(),
                    signingconfig.getStorePassword(),
                    signingconfig.getKeyPassword(),
                    signingconfig.getKeyAlias())

            def md5 = getFingerprint(certificateInfo.getCertificate(), "MD5")
            def sha1 = getFingerprint(certificateInfo.getCertificate(), "SHA1")
            def sha256 = getFingerprint(certificateInfo.getCertificate(), "SHA-256")
            println "Show $flavor_with_buildtype_Name use  signing is " + signingconfig.name
            println "Show $flavor_with_buildtype_Name StoreFile " + signingconfig.getStoreFile()
            println "Show $flavor_with_buildtype_Name signingInfo.md5 " + md5
            println "Show $flavor_with_buildtype_Name signingInfo.sha1 " + sha1
            println "Show $flavor_with_buildtype_Name signingInfo.sha256 " + sha256
            //TODO here pass md5/sha1/sha256 tby Cmake Args !!!
            variant.buildConfigField "String", "SIGN_MD5", "\"${md5}\""
            variant.buildConfigField "String", "SIGN_SHA1", "\"${sha1}\""
            variant.buildConfigField "String", "SIGN_SHA256", "\"${sha256}\""
            MY_APP_SHA_TYPE = "SHA1"
            MY_APP_SHA_VALUE = sha1
            MY_APP_SHA_VALUES.put(flavor_with_buildtype_Name,sha1)
        }
    }
}

 static String getFingerprint(Certificate cert, String hashAlgorithm) {
    if (cert == null) {
        return null
    }
    try {
        MessageDigest digest = MessageDigest.getInstance(hashAlgorithm)
        return toHexadecimalString(digest.digest(cert.getEncoded()))
    } catch (NoSuchAlgorithmException | CertificateEncodingException e) {

    }
    return null
}

private static String toHexadecimalString(byte[] value) {
    StringBuilder sb = new StringBuilder()
    int len = value.length
    for (int i = 0; i < len; i++) {
        int num = ((int) value[i]) & 0xff
        if (num < 0x10) {
            sb.append('0')
        }
        sb.append(Integer.toHexString(num))
        if (i < len - 1) {
            sb.append(':')
        }
    }
    return sb.toString().toUpperCase(Locale.US)
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':signature_checker')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
}
